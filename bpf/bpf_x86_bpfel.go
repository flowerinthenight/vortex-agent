// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64) && linux

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type BpfEvent struct {
	_     structs.HostLayout
	Comm  [16]uint8
	Type  uint32
	Tgid  uint32
	Bytes int64
	Saddr uint32
	Sport uint16
	_     [2]byte
	Daddr uint32
	Dport uint16
	_     [2]byte
}

// LoadBpf returns the embedded CollectionSpec for Bpf.
func LoadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Bpf: %w", err)
	}

	return spec, err
}

// LoadBpfObjects loads Bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*BpfObjects
//	*BpfPrograms
//	*BpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// BpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfSpecs struct {
	BpfProgramSpecs
	BpfMapSpecs
	BpfVariableSpecs
}

// BpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfProgramSpecs struct {
	HandleEnterSendto  *ebpf.ProgramSpec `ebpf:"handle_enter_sendto"`
	SockRecvmsgFexit   *ebpf.ProgramSpec `ebpf:"sock_recvmsg_fexit"`
	SockSendmsgFentry  *ebpf.ProgramSpec `ebpf:"sock_sendmsg_fentry"`
	TcpRecvmsgFexit    *ebpf.ProgramSpec `ebpf:"tcp_recvmsg_fexit"`
	TcpSendmsgFexit    *ebpf.ProgramSpec `ebpf:"tcp_sendmsg_fexit"`
	UdpRecvmsgFexit    *ebpf.ProgramSpec `ebpf:"udp_recvmsg_fexit"`
	UdpSendmsgFexit    *ebpf.ProgramSpec `ebpf:"udp_sendmsg_fexit"`
	UprobeSSL_read     *ebpf.ProgramSpec `ebpf:"uprobe_SSL_read"`
	UprobeSSL_write    *ebpf.ProgramSpec `ebpf:"uprobe_SSL_write"`
	UretprobeSSL_read  *ebpf.ProgramSpec `ebpf:"uretprobe_SSL_read"`
	UretprobeSSL_write *ebpf.ProgramSpec `ebpf:"uretprobe_SSL_write"`
}

// BpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfMapSpecs struct {
	Events       *ebpf.MapSpec `ebpf:"events"`
	TgidsToTrace *ebpf.MapSpec `ebpf:"tgids_to_trace"`
}

// BpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type BpfVariableSpecs struct {
}

// BpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfObjects struct {
	BpfPrograms
	BpfMaps
	BpfVariables
}

func (o *BpfObjects) Close() error {
	return _BpfClose(
		&o.BpfPrograms,
		&o.BpfMaps,
	)
}

// BpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfMaps struct {
	Events       *ebpf.Map `ebpf:"events"`
	TgidsToTrace *ebpf.Map `ebpf:"tgids_to_trace"`
}

func (m *BpfMaps) Close() error {
	return _BpfClose(
		m.Events,
		m.TgidsToTrace,
	)
}

// BpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfVariables struct {
}

// BpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type BpfPrograms struct {
	HandleEnterSendto  *ebpf.Program `ebpf:"handle_enter_sendto"`
	SockRecvmsgFexit   *ebpf.Program `ebpf:"sock_recvmsg_fexit"`
	SockSendmsgFentry  *ebpf.Program `ebpf:"sock_sendmsg_fentry"`
	TcpRecvmsgFexit    *ebpf.Program `ebpf:"tcp_recvmsg_fexit"`
	TcpSendmsgFexit    *ebpf.Program `ebpf:"tcp_sendmsg_fexit"`
	UdpRecvmsgFexit    *ebpf.Program `ebpf:"udp_recvmsg_fexit"`
	UdpSendmsgFexit    *ebpf.Program `ebpf:"udp_sendmsg_fexit"`
	UprobeSSL_read     *ebpf.Program `ebpf:"uprobe_SSL_read"`
	UprobeSSL_write    *ebpf.Program `ebpf:"uprobe_SSL_write"`
	UretprobeSSL_read  *ebpf.Program `ebpf:"uretprobe_SSL_read"`
	UretprobeSSL_write *ebpf.Program `ebpf:"uretprobe_SSL_write"`
}

func (p *BpfPrograms) Close() error {
	return _BpfClose(
		p.HandleEnterSendto,
		p.SockRecvmsgFexit,
		p.SockSendmsgFentry,
		p.TcpRecvmsgFexit,
		p.TcpSendmsgFexit,
		p.UdpRecvmsgFexit,
		p.UdpSendmsgFexit,
		p.UprobeSSL_read,
		p.UprobeSSL_write,
		p.UretprobeSSL_read,
		p.UretprobeSSL_write,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_x86_bpfel.o
var _BpfBytes []byte
