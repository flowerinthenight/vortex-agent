//go:build linux

package main

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"log/slog"
	"os"
	"os/signal"
	"strings"
	"syscall"

	"github.com/cilium/ebpf"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
)

//go:generate bpf2go -target amd64 -tags linux -cflags "-O2 -g -Wall -Werror" -type event bpf ./bpf/bpf.c -- -I./libbpf/src -I./vmlinux.h/include/x86_64

func main() {
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		slog.Error("RemoveMemlock failed:", "err", err)
		return
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		slog.Error("loadBpfObjects failed:", "err", err)
		return
	}

	defer objs.Close()
	slog.Info("BPF objects loaded successfully")

	// ssm, err := link.AttachTracing(link.TracingOptions{
	// 	Program:    objs.SockSendmsgFexit,
	// 	AttachType: ebpf.AttachTraceFExit,
	// })

	// if err != nil {
	// 	slog.Error("fexit/sock_sendmsg failed:", "err", err)
	// 	return
	// }

	// defer ssm.Close()
	// slog.Info("fexit/sock_sendmsg attached successfully")

	srm, err := link.AttachTracing(link.TracingOptions{
		Program:    objs.SockRecvmsgFexit,
		AttachType: ebpf.AttachTraceFExit,
	})

	if err != nil {
		slog.Error("fexit/sock_recvmsg failed:", "err", err)
		return
	}

	defer srm.Close()
	slog.Info("fexit/sock_recvmsg attached successfully")

	krssm, err := link.Kretprobe("sys_sendmsg", objs.SysSendmsgRet, nil)
	if err != nil {
		slog.Error("kretprobe/sys_sendmsg failed:", "err", err)
		return
	}

	defer krssm.Close()
	slog.Info("kretprobe/sys_sendmsg attached successfully")

	rd, err := ringbuf.NewReader(objs.Events)
	if err != nil {
		slog.Error("ringbuf reader failed:", "err", err)
		return
	}

	defer rd.Close()

	go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			slog.Error("rd.Close failed:", "err", err)
			os.Exit(1)
		}
	}()

	var count uint64

	var line strings.Builder

	// bpfEvent is generated by bpf2go.
	var event bpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				slog.Info("received signal, exiting..")
				return
			}

			slog.Error("reading from reader failed:", "err", err)
			continue
		}

		count++
		if count%1000 == 0 {
			slog.Info("count:", "v", count)
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			slog.Error("parsing ringbuf event failed:", "err", err)
			continue
		}

		typeStr, protocolStr := "UNKNOWN", "UNKNOWN"
		switch event.Type {
		case syscall.SOCK_STREAM:
			typeStr = "SOCK_STREAM"
		case syscall.SOCK_DGRAM:
			typeStr = "SOCK_DGRAM"
		case syscall.SOCK_RAW:
			typeStr = "SOCK_RAW"
		}
		switch event.Protocol {
		case syscall.IPPROTO_TCP:
			protocolStr = "IPPROTO_TCP"
		case syscall.IPPROTO_UDP:
			protocolStr = "IPPROTO_UDP"
		case syscall.IPPROTO_ICMP:
			protocolStr = "IPPROTO_ICMP"
		}

		action := "transferred"
		if event.IsSend == 1 {
			action = "sock_sendmsg"
		} else {
			action = "sock_recvmsg"
		}

		line.Reset()
		fmt.Fprintf(&line, "comm=%s, pid=%v, tgid=%v, family=%v, type=%v, proto=%v, ret=%v, fn=%v",
			event.Comm,
			event.Pid,
			event.Tgid,
			event.Family,
			typeStr,
			protocolStr,
			event.Bytes,
			action,
		)

		slog.Info(line.String())
	}
}

// intToIP converts IPv4 number to net.IP
// func intToIP(ipNum uint32) net.IP {
// 	ip := make(net.IP, 4)
// 	binary.BigEndian.PutUint32(ip, ipNum)
// 	return ip
// }
