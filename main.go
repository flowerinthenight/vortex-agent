//go:build linux

package main

import (
	"errors"
	"log/slog"
	"os"
	"os/signal"
	"syscall"

	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"github.com/cilium/ebpf/rlimit"
)

//go:generate bpf2go -tags linux -cflags "-O2 -g -Wall -Werror" bpf ./bpf/bpf.c -- -I./libbpf/src -I./vmlinux.h/include/x86_64

// See bpf/bpf.c for definitions.
const (
	DirectionUnknown = 0
	DirectionSend    = 1
	DirectionRecv    = 2
)

type Event struct {
	PID         uint32
	TGID        uint32
	Bytes       uint64
	TimestampNS uint64
	Direction   int32
	Comm        [16]byte // TASK_COMM_LEN
}

func main() {
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		slog.Error("RemoveMemlock failed:", "err", err)
		return
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		slog.Error("loadBpfObjects failed:", "err", err)
		return
	}

	defer objs.Close()

	sm, err := link.Kretprobe("sys_sendmsg", objs.SysSendmsgRet, nil)
	if err != nil {
		slog.Error("link.Kretprobe/sys_sendmsg failed:", "err", err)
		return
	}

	defer sm.Close()

	rm, err := link.Kretprobe("sys_recvmsg", objs.SysRecvmsgRet, nil)
	if err != nil {
		slog.Error("link.Kretprobe/sys_recvmsg failed:", "err", err)
		return
	}

	defer rm.Close()

	rd, err := ringbuf.NewReader(objs.Events)
	if err != nil {
		slog.Error("ringbuf reader failed:", "err", err)
		return
	}

	defer rd.Close()

	go func() {
		<-stopper

		if err := rd.Close(); err != nil {
			slog.Error("rd.Close failed:", "err", err)
			os.Exit(1)
		}
	}()

	var count uint64

	// var line strings.Builder

	// bpfEvent is generated by bpf2go.
	// var event bpfEvent
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, ringbuf.ErrClosed) {
				slog.Info("received signal, exiting..")
				return
			}

			slog.Error("reading from reader failed:", "err", err)
			continue
		}

		_ = record
		count++
		if count%1000 == 0 {
			slog.Info("count:", "v", count)
		}

		// Parse the ringbuf event entry into a bpfEvent structure.
		// if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.BigEndian, &event); err != nil {
		// 	slog.Error("parsing ringbuf event failed:", "err", err)
		// 	continue
		// }

		// line.Reset()
		// fmt.Fprintf(&line, "%s\t%s:%d -> %s:%d",
		// 	event.Comm,
		// 	intToIP(event.Saddr),
		// 	event.Sport,
		// 	intToIP(event.Daddr),
		// 	event.Dport,
		// )

		// slog.Info(line.String())
	}
}

// intToIP converts IPv4 number to net.IP
// func intToIP(ipNum uint32) net.IP {
// 	ip := make(net.IP, 4)
// 	binary.BigEndian.PutUint32(ip, ipNum)
// 	return ip
// }
